<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements HOOK_form_alter()
 *
 * This changes the performance of the views exposed form used to filter roadmap
 * nodes. We do this here because we want the form to be controlled via
 * JavaScript rather than OOTB functionality. We don't actually want to remove
 * things from the view, just show and hide them, otherwise all the formatting
 * gets lost because we need to maintain the grouping structure.
 */

// Helper function.
function _removeElementWithValue($array, $value) {
  foreach($array as $subKey => $subArray) {
    if($subArray == $value){
      unset($array[$subKey]);
    }
  }
  return $array;
}

function dta_gov_au_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if($form_id == 'views_exposed_form' && strpos($form['#id'], 'roadmap' !== false)) {
    // Ditch the 'apply' button. The option to submit is also turned off via JS.
    unset($form['actions']['submit']);
  }
}

/**
 * Implements HOOK_preprocess_maintenance_page()
 *
 * Adds required variables to the maintenance page.
 **/

function dta_gov_au_preprocess_maintenance_page(&$variables) {
  $form = Drupal::formBuilder()->getForm(Drupal\user\Form\UserLoginForm::class) ;
  $render = Drupal::service('renderer');
  $variables['login_form'] = $render->renderPlain($form);
}

function dta_gov_au_preprocess_html(&$variables) {
  if(isset($_ENV['ENVIRONMENT'])) {
    $variables['environment'] = $_ENV['ENVIRONMENT'];
  } else {
    $variables['environment'] = 'local';
  }
}

/**
 * Implements hook_preprocess_menu().
 *
 * Adds 'is_front' variable to html.html.twig.
 * Adds the 'active' class to the active <li>.
 *
 **/
function dta_gov_au_preprocess_menu(&$variables, $hook) {
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    $variables['is_front'] = FALSE;
  }
	if ($hook == 'menu') {
		dta_gov_au_menu_active_item($variables['items']);
	}
}

function dta_gov_au_menu_active_item(&$items) {
  $current_path = \Drupal::request()->getRequestUri();
  foreach ($items as $key => $item) {
    // if path is current path, set active to li
    if ($item['url']->toString() == $current_path) {
      // add active linl
      $items[$key]['attributes']['class'] = 'active';
    }
    if (!empty($items[$key]['below'])) {
      dta_gov_au_menu_active_item($items[$key]['below']);
    }
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 *
 * As per https://www.drupal.org/docs/8/theming-drupal-8/creating-a-drupal-8-sub-theme-or-sub-theme-of-sub-theme
 * to ensure that sub themes inherit block templates.
 */
function dta_gov_au_theme_suggestions_block_alter(&$suggestions, $variables) {
/**
 * Adds theme hook suggestions to blocks
 */
   if(isset($variables['elements']['#id'])) {
     $block_id = $variables['elements']['#id'];
     foreach ($suggestions as &$suggestion) {
       $suggestion = str_replace('dta_uikit_base_', 'dta_gov_au_', $suggestion);
     }
   }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter
 *
 * Adds suggestions to text inputs based on the ID of the element.
 */

function dta_gov_au_theme_suggestions_input_alter(&$suggestions, $variables) {
  if(isset($variables['element']['#id'])) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . str_replace('-','_', $variables['element']['#id']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds placeholder text to the search bar.
 *
 **/

function dta_gov_au_form_search_api_page_block_form_alter(&$form, &$form_state, $form_id) {
  $search_text = \Drupal::service('path.matcher')->isFrontPage() ? t('What are you looking for today?') : t('Search dta.gov.au');
  $form['keys']['#attributes']['placeholder'] = $search_text;
  $form['keys']['#attributes']['required'] = TRUE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Removes the 'homepage' field from comment forms.
 *
 **/

function dta_gov_au_form_comment_form_alter(&$form, &$form_state, $form_id) {

  $form['author']['homepage']['#access'] = FALSE;
  $form['author']['mail']['#title'] = t('Your email address');
  $form['author']['name']['#wrapper_attributes']['class'] = ['col-xs-12', 'col-sm-6'];
  $form['author']['mail']['#wrapper_attributes']['class'] = ['col-xs-12', 'col-sm-6'];
  $form['author']['name']['#attributes']['class'] = ['au-text-input--block'];
  $form['author']['mail']['#attributes']['class'] = ['au-text-input--block'];
  $form['author']['mail']['#description'] = t('Your email address will not be publicly displayed');
  $form['comment_body']['widget']['0']['#title'] = t('Your comment');
  $form['actions']['submit']['#value'] = t('Comment');

  $form['author_wrapper'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['row'],
    ],
    'name' => $form['author']['name'],
    'mail' => $form['author']['mail'],
    '#weight' => -97,
  ];

  unset($form['author']['name']);
  unset($form['author']['mail']);

}

/**
 *
 * Implements hook_theme_suggestions_HOOK_alter
 *
 * This adds theme hooks to various elements.
 *
 **/

 /* Adds 'item_list__' suggestion to list items in views. */
 function dta_gov_au_theme_suggestions_item_list_alter(&$suggestions, &$vars) {
   $request['view_id'] = \Drupal::routeMatch()->getRouteObject()->getDefault('view_id');
   $request['display_id'] = \Drupal::routeMatch()->getRouteObject()->getDefault('display_id');
   if(!empty($request)) {
     $suggestions[] = 'item_list__' . $request['view_id'];
     $suggestions[] = 'item_list__' . $request['display_id'];
     $suggestions[] = 'item_list__' . $request['view_id'] . '__' . $request['display_id'];
   }
 }

/**
 * Implements hook_preprocess_block().
 */
function dta_gov_au_preprocess_block(&$variables) {
  if(isset($variables['elements']['#id'])) {
    $variables['content']['#attributes']['block'] = $variables['elements']['#id'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function dta_gov_au_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(array('block-', '-'), array('', '_'), $variables['attributes']['block']);
    $block = \Drupal\block\Entity\Block::load($hook);
    $region = $block->getRegion();
    $suggestions[] = $variables['theme_hook_original'] . '__' . $region;
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
    $suggestions[] = $variables['theme_hook_original'] . '__' . $region . '__' . $hook;
  }
}

function dta_gov_au_theme_suggestions_views_view_grouping_alter(array &$suggestions, array $variables) {
  // Adds theme suggestions to the views grouping template.
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id();
  $suggestions[] = $variables['theme_hook_original'] . '__grouping_level_' . $variables['grouping_level'];
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id() . '__grouping_level_' . $variables['grouping_level'];
}

function dta_gov_au_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  // Add a theme suggestion to the views unformatted template.
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id();
}

function dta_gov_au_theme_suggestions_views_exposed_form_alter(array &$suggestions, array $variables) {
  // Add a theme suggestion to the views exposed form template.
  $suggestions[] = $variables['theme_hook_original'] . '__' . str_replace('-','_', $variables['form']['#id']);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter()
 * Create theme suggestions for user profile templates
**/
function dta_gov_au_theme_suggestions_user_alter(&$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
  }
  $viewmode = $variables['elements']['#view_mode'];
  $suggestions[] = $variables['theme_hook_original'] . '__' . str_replace('-','_', $viewmode);
  $suggestions[] = $variables['theme_hook_original'] . '__' . str_replace('-','_', $content_type);
  $suggestions[] = $variables['theme_hook_original'] . '__' . str_replace('-','_', $content_type) . '__' . str_replace('-','_', $viewmode);
}

/**
* Implements hook_preprocess_comment
*/
function dta_gov_au_preprocess_comment(&$variables) {

  $comment = $variables['elements']['#comment'];
  $account = $comment->getOwner();

  $username = [
    '#theme' => 'username__unlinked',
    '#account' => $account,
  ];

  $variables['author'] = \Drupal::service('renderer')->render($username);

  $comment_title = $comment->getSubject();

  $date = $variables['comment']->getCreatedTime();
  $variables['created'] = \Drupal::service('date.formatter')->formatInterval(REQUEST_TIME - $date);

  $datetime = new FormattableMarkup(
    '<span class="comments-ago">@datetime ago</span>', [
      '@datetime' => $variables['created'],
    ]
  );

  $permalink_text = new FormattableMarkup(
    '<span class="sr-only"> Permalink to @comment_title</span>', [
      '@comment_title' => $comment_title,
    ]
  );

  $variables['submitted'] = t('Commented @datetime', array('@datetime' => $datetime));

  $variables['permalink'] = Link::fromTextAndUrl(t('#@permalink_text', [
    '@permalink_text' => $permalink_text,
  ]), $comment->permalink());

  if (!empty($variables['parent'])) {
    $variables['parent'] = t('Replied @datetime to @parent_title by @parent_username', [
      '@parent_username' => $variables['parent_author'],
      '@parent_title' => $variables['parent_title'],
      '@datetime' => $datetime
    ]);
    unset($variables['submitted']);
  }
}
